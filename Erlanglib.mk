VERSION = $(shell cat src/*.app.src | grep vsn | cut -d\" -f2)
GIT_SHA = $(shell git rev-parse HEAD | cut -c1-8)

REBAR = $(shell which ./rebar3 || which rebar3)

BASE_PATH = _build/default

LIB_PATH = $(BASE_PATH)/lib
PLUGIN_PATH = $(BASE_PATH)/plugins

compile:
	$(REBAR) compile
	$(REBAR) unlock

check:
	$(REBAR) eunit

clean::
	find $(LIB_PATH) -type f \
		-name \*.beam -o -name \*.app -o -name erlcinfo | xargs rm -f
	find $(LIB_PATH) -type d \
		-name .rebar3 -o -name ebin | xargs rmdir 2>/dev/null || true
	find $(PLUGIN_PATH) -type f \
		-name \*.beam -o -name \*.app -o -name erlcinfo | xargs rm -f
	find $(PLUGIN_PATH) -type d \
		-name .rebar3 -o -name ebin | xargs rmdir 2>/dev/null || true

distclean:
	rm -rf _build

shell:
	$(REBAR) shell
	$(REBAR) unlock

upgrade:
	$(REBAR) upgrade
	$(REBAR) unlock

git-release:
	git tag -a $(VERSION)
	git push origin $(VERSION)

version:
	@echo "Version $(VERSION) (git-$(GIT_SHA))"

define usage-header
	@echo "Usage: make <Command> [Options]"
endef

USAGE_PADDING = 15

define usage-erlanglib-commands
	@printf '$(shell printf "    %%-$(USAGE_PADDING)s %%s\\\n%.0s" {1..8})' \
	compile "Compile the library" \
	check "Runs EUnit based unit tests" \
	clean "Remove all the files generated by the \"compile\" target" \
	distclean "Remove the \"_build\" directory recursively" \
	shell "Get into an Erlang shell with all the needed modules loaded" \
	upgrade "Upgrade dependencies" \
	git-release "Create and push a git tag named as current semantic version" \
	version "Print current semantic version and git sha"
endef

define usage-erlanglib-options
	@printf '$(shell printf "    %%-$(USAGE_PADDING)s %%s\\\n%.0s" {1..6})' \
	VERSION "Version (current: $(VERSION))" \
	GIT_SHA "Git SHA (current: $(GIT_SHA))" \
	REBAR "Rebar3 binary (current: $(REBAR))" \
	BASE_PATH "Path for all compiled output (default: $(BASE_PATH))" \
	LIB_PATH "Path for compiled libraries (default: $(LIB_PATH))" \
	PLUGIN_PATH "Path for compiled plugins (default: $(PLUGIN_PATH))"
endef

define usage
	$(usage-header)
	@echo
	@echo "Commands"
	$(usage-erlanglib-commands)
	@echo
	@echo "Options"
	$(usage-erlanglib-options)
endef
